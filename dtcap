#!/bin/bash
#
# DTCAP is a  DJ twin deck console audio player. Actually DTCAP is a
# BASH script to offer a simple, fast and powerful text user
# interface (TUI) to simulate two audio (DJ) decks with the
# MPV media player.
# So far DTCAP works on every linux system that offers a MPV shell
# and runs the MPV media player.
#
# To get more info - press <?> or see: https://github.com/zooxo/dtcap
#
# Version 1.0, (c) 2017 by deetee
#


#############
# Variables #
#############

# audio_dir="/" # Default music directory
audio_dir="/"

# Equalizer
# Set the gain for 10 frequency bands between -15 and +15
# Frequency band center frequency (in Hz): 31,25 62.5 125 250 500 1000 2000 4000 8000 16000
#
EQU_ZERO="0:0:0:0:0:0:0:0:0:0" # Neutral equalizer
EQU_MEGABASS="5:5:5:3:0:0:-2:-4:-6:-6"
EQU_BOOST="4:6:4:2:0:0:2:4:6:6"
EQU_ROCK="2:0:-2:-2:0:0:2:4:4:4"
#
EQU1=$EQU_ZERO # Equalizer assignment for deck 1
EQU2=$EQU_ZERO # Equalizer assignment for deck 2

# Dynamic CPU load control
MAX_CPU_SLEEP_TIME=0.3     # CPU sleeping time (in s) while waiting for a keypress
START_CPU_SLEEP_TIME=0.001 # Initial sleep time (must be > 0)
CPU_SLEEP_MULTIPLIER=1.05  # Multiplies CPU sleeptime while waiting for a keypress

# Dimensions and positions
MAXROW=$(stty size | cut -d" " -f1); MAXCOL=$(stty size | cut -d" " -f2) # Window dimensions
FSHEIGHT=$(($MAXROW-6)); FSROW=$(($MAXROW-$FSHEIGHT-2)) # Size and position of File Selection Window
DECK2POS=$(($MAXCOL-19))
MASTERPOS=$(($MAXCOL/2-9))

# Common constants
BLACK=0; BLUE=1; GREEN=2; CYAN=3; RED=4; MAGENTA=5; BROWN=6; WHITE=7 # Colors
ENTER='^M'; SPACE=$'\x20'; TAB=$'\x09'
CURUP='^[[A'; CURDOWN='^[[B'; CURRIGHT='^[[C'; CURLEFT='^[[D'


###############
# SUBPROGRAMS #
###############

EMPTYSTRING=""; ies=1; while [ $ies -le $MAXCOL ]; do # Generate empty string
 EMPTYSTRING="$EMPTYSTRING$SPACE"; ies=$(($ies + 1))
done

# Color profiles for standard theme
_colreset() { tput sgr0; tput setf $WHITE; tput setb $BLACK; } # Standard color scheme
_colinvers() { tput sgr0; tput setf $BLACK; tput setb $WHITE; } # Inverted standard
_colactive() { tput sgr0; tput setf $WHITE; tput setb $BLUE; } # Active deck
_colpassive() { tput sgr0; tput setf $BLACK; tput setb $CYAN; } # Passive deck (autoDJ)
_colplaylist() { tput sgr0; tput setf $WHITE; tput setb $BLUE; } # File selection window
_colselect() { tput bold; tput setf $BROWN; tput setb $BLUE; } # Selected file
_colhelp() { tput bold; tput setf $GREEN; tput setb $BLACK; } # Help color

# Buttons
_button() { # Print button - X Y COLF COLB TEXT
 tput setf $3; tput setb $4; _curpos $1 $2; echo -n "$5"
}
_button1()      { _button 2 0 $WHITE $GREEN ">"; } # Play passive
_button1play()  { _button 2 0 $WHITE $RED ">"; } # Play active
_button1pause() { _button 2 0 $BLACK $BROWN "|"; } # Pause
_button2()      { _button $(($DECK2POS+2)) 0 $WHITE $GREEN ">"; } # Play passive
_button2play()  { _button $(($DECK2POS+2)) 0 $WHITE $RED ">"; } # Play active
_button2pause() { _button $(($DECK2POS+2)) 0 $BLACK $BROWN "|"; } # Pause

_curpos() { tput cup $2 $1; } # Position cursor at X Y

_cleararea(){ # Clears area at X Y WIDTH HEIGHT
 s=${EMPTYSTRING:0:$3}; i=0
 while [ $i -lt $4 ]; do
  _curpos $1 $(($2+$i)); echo -n "$s"
  i=$(($i+1))
 done
}

_message() { # Writes message
 _colreset; _cleararea 0 $MAXROW $MAXCOL 1
 _curpos 0 $MAXROW; echo -n "$1"
}

_file_select() { # Draw file selection window
 _colinvers; _cleararea 0 $FSROW $MAXCOL 1
 _curpos 0 $FSROW; echo -n $fsnr/$filecount
 tmp=$((${#audio_dir}-$MAXCOL+10)); if [ "$tmp" -lt "0" ]; then tmp=0; fi
 _curpos 10 $FSROW; echo -n ${audio_dir:$tmp:$(($MAXCOL-10-1))}
 _colplaylist; _cleararea 0 $(($FSROW+1)) $MAXCOL $FSHEIGHT
 _curpos 0 $(($FSROW+1))
 ls -l $audio_dir | awk '{print substr($9,0,'''$MAXCOL''')}' | tail -n $(($filecount-$fsnr+1)) | head -n $FSHEIGHT
 _colselect; _curpos 0 $(($FSROW+1))
 ls -l $audio_dir | awk '{print substr($9,0,'''$MAXCOL''')}' | tail -n $(($filecount-$fsnr+1)) | head -n 1
 _colreset
}

_set_volume() { # Set volume
 # tmp1=$((($volume1-$mfader*$volume1/100)*$mvolume/100)) # linear fade
 # tmp2=$((($mfader*$volume2/100)*$mvolume/100))
 vol1=$((($volume1-$mfader*$mfader*$volume1/10000)*$mvolume/100)) # quadratic fade
 vol2=$((($mfader*$volume2/50-$mfader*$mfader*$volume2/10000)*$mvolume/100))
 if [ -p /tmp/mpvauto ] && [ $isautodj -eq 1 ]; then
  echo "set volume $vol1" > /tmp/mpvauto &
 fi
 if [ -p /tmp/mpv1 ] && [ $mpv1started -eq 1 ]; then
  echo "set volume $vol1" > /tmp/mpv1 &
 fi
 if [ -p /tmp/mpv2 ] && [ $mpv2started -eq 1 ]; then
  echo "set volume $vol2" > /tmp/mpv2 &
 fi
}

_fader() { # Print fader - X Y COLFline COLBline COLFlever COLBlever COLFval COLBval VAL
 tmp=$9; bardigit=$((tmp / 10))
 tput setf $3; tput setb $4; _curpos $1 $2; echo -n "-----+-----"
 tput setf $5; tput setb $6; _curpos $(($1+$bardigit)) $2; echo -n "|"
 tput setf $7; tput setb $8; _curpos $(($1+11)) $2; printf "%4s" "$9%"
}

_mfader() { # Print master fader - X Y COLFline COLBline COLFlever COLBlever VAL
 tmp=$7; bardigit=$((tmp / 10))
 tput setf $3; tput setb $4; _curpos $1 $2; echo -n "-----+-----"
 tput setf $5; tput setb $6; _curpos $(($1+$bardigit)) $2; echo -n "|"
}

_progress() { # Print progress bar - X Y COLback COLbar COLFval COLBval VAL
 barstring="||||||||||"; tmp=$7; bardigit=$((tmp / 10))
 tput setb $4; tput setf $6; _curpos $1 $2; echo -n "${barstring:0:$bardigit}"
 tput setb $3; _curpos $(($1+$bardigit)) $2; echo -n "${barstring:0:$((10-$bardigit))}"
 tput setf $5; tput setb $6; _curpos $(($1+10)) $2; printf "%5s" "$7%"
}

_progress1() { # Show progress of deck 1
 if [ $isautodj -eq 1 ]; then
  if [ $ispauseauto -eq 1 ]; then # progress of deck 1 (autoDJ)
   tmp=$(tail -n 1 /tmp/mpvoutauto 2> /dev/null | awk '{print $6}' | tr -dc '0-9')
  else
   tmp=$(tail -n 1 /tmp/mpvoutauto 2> /dev/null | awk '{print $5}' | tr -dc '0-9')
  fi
 else
  if [ $ispause1 -eq 1 ]; then
   tmp=$(tail -n 1 /tmp/mpvout1 2> /dev/null | awk '{print $6}' | tr -dc '0-9')
  else
   tmp=$(tail -n 1 /tmp/mpvout1 2> /dev/null | awk '{print $5}' | tr -dc '0-9')
  fi
 fi
 _progress 4 0 $GREEN $MAGENTA $BLACK $WHITE $tmp
}

_progress2() { # Show progress of deck 2
 if [ $ispause2 -eq 1 ]; then
  test=$(tail -n 1 /tmp/mpvout2 2> /dev/null | awk '{print $6}' | tr -dc '0-9')
 else
  test=$(tail -n 1 /tmp/mpvout2 2> /dev/null | awk '{print $5}' | tr -dc '0-9')
 fi
 _progress $(($DECK2POS+4)) 0 $GREEN $MAGENTA $BLACK $WHITE $test
}

_printmaster() { # Print master
 _colactive; _cleararea $MASTERPOS 0 19 3
 _curpos $(($MASTERPOS+7)) 0; echo -n "MASTER"
 _curpos $(($MASTERPOS+2)) 1; echo -n "L"
 _curpos $(($MASTERPOS+16)) 1; echo -n "R"
 _curpos $(($MASTERPOS)) 2; echo -n "VOL"
 _mfader $(($MASTERPOS+4)) 1 $WHITE $GREEN $WHITE $RED $mfader
 _fader $(($MASTERPOS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $mvolume
}

_printdeck1() { # Print deck 1
 if [ $isautodj -eq 1 ]; then _colpassive; else _colactive; fi
 _cleararea 0 0 19 3
 _curpos 0 0; echo -n "A"
 if [ $isautodj -eq 1 ]; then
  _curpos 0 1; echo -n "-AutoDJ-"
 else
  _curpos 0 1; echo -n "${deck1_file:0:19}"
 fi
 _curpos 0 2; echo -n "VOL"
 _fader 4 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume1
 _progress1
 if [ $isplay1 -eq 1 ] || [ $isautodj -eq 1 ]; then
  if [ $ispause1 -eq 1 ] || [ $ispauseauto -eq 1 ]; then _button1pause; else _button1play; fi
 else
  _button1
 fi
 if [ $isloop1 -eq 1 ]; then
  _button 3 0 $BLACK $BROWN "L"
 fi
}

_printdeck2() { # Print deck 2
# if [ $deck -eq 1 ]; then _colpassive; else _colactive; fi
 _colactive
 _cleararea $DECK2POS 0 19 3
 _curpos $DECK2POS 0; echo -n "B"
 _curpos $DECK2POS 1; echo -n "${deck2_file:0:19}"
 _curpos $DECK2POS 2; echo -n "VOL"
 _fader $(($DECK2POS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume2
 _progress2
 if [ $isplay2 -eq 1 ]; then
  if [ $ispause2 -eq 1 ]; then _button2pause; else _button2play; fi
 else
  _button2
 fi
 if [ $isloop2 -eq 1 ]; then
  _button $(($DECK2POS+3)) 0 $BLACK $BROWN "L"
 fi
}

_refresh(){ # Refresh complete display
 _colreset; clear
 _printmaster
 _printdeck1
 _printdeck2
 _file_select
}


##############
# Initialize #
##############

tput clear
tput civis # Cursor invisible

if [ $(ps -A | grep mpv | wc -l) -gt 2 ]; then # Kill mpv processes if they are active
 pkill -x mpv
fi
# Remove temporary mpv-files if they exist
if [ -e /tmp/mpv1 ]; then rm /tmp/mpv1; fi
if [ -e /tmp/mpv2 ]; then rm /tmp/mpv2; fi
if [ -e /tmp/mpvauto ]; then rm /tmp/mpvauto; fi
if [ -e /tmp/mpvout1 ]; then rm /tmp/mpvout1; fi
if [ -e /tmp/mpvout2 ]; then rm /tmp/mpvout2; fi
if [ -e /tmp/mpvoutauto ]; then rm /tmp/mpvoutauto; fi
mkfifo /tmp/mpv1 # Create fifo file for deck 1
mkfifo /tmp/mpv2 # Create fifo file for deck 2
mkfifo /tmp/mpvauto # Create fifo file for autoDJ


################
# Main Program #
################

# Setting start values
volume1=100; volume2=100 # Volume values
mfader=50; mvolume=100 # Master
deck1_file="-empty-"; deck2_file="-empty-" # Deck title names
fsnr=1 # Number of selected file
filecount=$(ls $audio_dir | wc -l) # Number of files in directory
sleeptime=$START_CPU_SLEEP_TIME # Sleeping time between key queries

# Flags
mpv1started=0; mpv2started=0 # Mpv process started
ispause1=0; ispause2=0; ispauseauto=0 # Pause
isplay1=0; isplay2=0 # Play
isautodj=0 # AutoDJ
isloop1=0; isloop2=0 # Decks looping

_refresh # Refresh screen
_message "Welcome to dtcap - get help with <?>"


while :; do # Big fat loop

if [ -t 0 ]; then stty -echo -icanon -icrnl time 0 min 0; fi # Wait for keypress loop
key=''
while [ "x$key" == "x" ]; do key="`cat -v`"

# Activities while waiting for a keypress

 # Dynamic CPU sleeping
 sleeptime=$(awk 'BEGIN{print '''$sleeptime'''*'''$CPU_SLEEP_MULTIPLIER'''}')
 if [ "$(awk 'BEGIN{if ('''$sleeptime'''>'''$MAX_CPU_SLEEP_TIME''') print 1; else print 0;}')" -eq 1 ]; then
  sleeptime=$MAX_CPU_SLEEP_TIME
 fi
 sleep $sleeptime # Sleep to reduce CPU load

 # Progress of playing
 _progress1; _progress2

 # Check end of playing
 if [ "$(tail -n 1 /tmp/mpvout1 2> /dev/null | awk '{print $1}')" == "Exiting..." ]; then
  isplay1=0; ispause1=0; _button1
 fi
 if [ "$(tail -n 1 /tmp/mpvout2 2> /dev/null | awk '{print $1}')" == "Exiting..." ]; then
  isplay2=0; ispause2=0; _button2
 fi

 # Print cpu sleep time - useful to adjust MAX_CPU_SLEEP_TIME, START_CPU_SLEEP_TIME and CPU_SLEEP_MULTIPLIER
 #_colreset; _curpos 0 $MAXROW; echo -n "          "; _curpos 0 $MAXROW; echo -n $sleeptime

done # End of keypress waiting loop
if [ -t 0 ]; then stty sane; fi
sleeptime=$START_CPU_SLEEP_TIME

 _message # Clear message area

 #_colreset; _curpos $(($MAXCOL-4)) $MAXROW; echo -n $key # Print code of pressed key

 case $key in # Evaluate key pressed
  $CURUP) # Cursor up - PREV FILE
   if [ $fsnr -gt 1 ]; then fsnr=$(($fsnr-1)); fi
   _file_select
  ;;
  $CURLEFT) # Cursor left - PAGE UP
   if [ $fsnr -gt $FSHEIGHT ]; then
    fsnr=$(($fsnr-$FSHEIGHT))
   else
    fsnr=1
   fi
   _file_select
  ;;
  $CURDOWN) # Cursor down - NEXT FILE
   if [ $fsnr -lt $filecount ]; then fsnr=$(($fsnr+1)); fi
   _file_select
  ;;
  $CURRIGHT) # Cursor right - PAGE DOWN
   if [ $fsnr -lt $(($filecount-$FSHEIGHT)) ]; then
    fsnr=$(($fsnr+$FSHEIGHT))
   else
    fsnr=$filecount
   fi
   _file_select
  ;;
  '<'|-|'/') # One directory up
   audio_dir=$(dirname $audio_dir)"/"
   fsnr=1
   filecount=$(ls $audio_dir | wc -l)
   _file_select
  ;;
  ' '|1) # Load deck 1
   fsfile=$(ls -l $audio_dir | awk '{print $9}' | tail -n $(($filecount-$fsnr+1)) | head -n 1)
   if [ -d "$audio_dir$fsfile" ]; then # enter directory
    audio_dir=$audio_dir$fsfile"/"
    fsnr=1
    filecount=$(ls $audio_dir | wc -l)
    _file_select
   else
     if [ $isplay1 -eq 1 ]; then
       _message "Deck A is playing!"
     else
      _isplay1=0
      deck1_dir=$audio_dir; deck1_file=$fsfile
      _printdeck1
     fi
   fi
  ;;
  2|$ENTER) # Load deck 2
   fsfile=$(ls -l $audio_dir | awk '{print $9}' | tail -n $(($filecount-$fsnr+1)) | head -n 1)
   if [ -d "$audio_dir$fsfile" ]; then # enter directory
    audio_dir=$audio_dir$fsfile"/"
    fsnr=1
    filecount=$(ls $audio_dir | wc -l)
    _file_select
   else
     if [ $isplay2 -eq 1 ]; then
       _message "Deck B is playing!"
     else
      _isplay2=0
      deck2_dir=$audio_dir; deck2_file=$fsfile
      _printdeck2
     fi
   fi
  ;;
  e|E|r|R) # Play/stop deck 1 or autoDJ next
   if [ $isautodj -eq 1 ]; then # autoDJ next
    if [ ! $ispauseauto -eq 1 ]; then
     echo "playlist-next" > /tmp/mpvauto &
    fi
   else
    if [ $isplay1 -eq 1 ]; then  # Stop
     echo "quit" > /tmp/mpv1 &
     mpv1started=0; isplay1=0; ispause1=0
     _button1
    else # Play
     if [ ! -z "$fsfile" ]; then
      _set_volume
      if [ $isloop1 -eq 1 ]; then
       mpv -af=equalizer="$EQU1" --no-video --loop --volume=$vol1 --input-file=/tmp/mpv1 $deck1_dir$deck1_file > /tmp/mpvout1 2>&1 &
      else
       mpv -af=equalizer="$EQU1" --no-video --volume=$vol1 --input-file=/tmp/mpv1 $deck1_dir$deck1_file > /tmp/mpvout1 2>&1 &
      fi
      mpv1started=1
      isplay1=1
      _button1play
     fi
    fi
   fi
  ;;
  o|O|z|Z|y|Y) # Play/stop deck 2
   if [ $isplay2 -eq 1 ]; then # Stop
    echo "quit" > /tmp/mpv2 &
    mpv2started=0; isplay2=0; ispause2=0
    _button2
   else
    if [ ! -z "$fsfile" ]; then # Play
     _set_volume
     if [ $isloop2 -eq 1 ]; then
      mpv -af=equalizer="$EQU2" --no-video --loop --volume=$vol2 --input-file=/tmp/mpv2 $deck2_dir$deck2_file > /tmp/mpvout2 2>&1 &
     else
      mpv -af=equalizer="$EQU2" --no-video --volume=$vol2 --input-file=/tmp/mpv2 $deck2_dir$deck2_file > /tmp/mpvout2 2>&1 &
     fi
     mpv2started=1
     isplay2=1
     _button2play
    fi
   fi
  ;;
  q|Q) #PAUSE - deck 1
   if [ $isautodj -eq 1 ]; then
    echo "cycle pause" > /tmp/mpvauto
    if [ $ispauseauto -eq 1 ]; then
     ispauseauto=0
     _button1play
    else
     ispauseauto=1
     _button1pause
    fi
   else
    if [ $isplay1 -eq 1 ]; then
     echo "cycle pause" > /tmp/mpv1
    fi
    if [ $ispause1 -eq 1 ]; then
     ispause1=0
     _button1play
    else
     ispause1=1
     _button1pause
    fi
   fi
  ;;
  u|U) # PAUSE - deck 2
   if [ $isplay2 -eq 1 ]; then
    echo "cycle pause" > /tmp/mpv2
    if [ $ispause2 -eq 1 ]; then
     ispause2=0
     _button2play
    else
     ispause2=1
     _button2pause
    fi
   fi
  ;;
  w|W) # Volume up - deck 1
   if [ $volume1 -lt 96 ]; then
    volume1=$(($volume1+5))
    _fader 4 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume1
    _set_volume
   fi
  ;;
  s|S) # Volume down - deck 1
   if [ $volume1 -gt 4 ]; then
    volume1=$(($volume1-5))
    _fader 4 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume1
    _set_volume
   fi
  ;;
  i|I) # Volume up - deck 2
   if [ $volume2 -lt 96 ]; then
    volume2=$(($volume2+5))
    _fader $(($DECK2POS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume2
    _set_volume
   fi
  ;;
  k|K) # Volume down - deck 2
   if [ $volume2 -gt 4 ]; then
    volume2=$(($volume2-5))
    _fader $(($DECK2POS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $volume2
    _set_volume
   fi
  ;;
  d|D) # Seek forward for 10 seconds deck 1
   if [ $isautodj -eq 1 ]; then
    if [ -e /tmp/mpvauto ]; then
     echo "seek 10" > /tmp/mpvauto
    fi
   else
    if [ -e /tmp/mpv1 ] && [ $isplay1 -eq 1 ]; then
     echo "seek 10" > /tmp/mpv1
    fi
   fi
  ;;
  a|A) # Seek backward for 10 seconds deck 1
   if [ $isautodj -eq 1 ]; then
    if [ -e /tmp/mpvauto ]; then
     echo "seek -10" > /tmp/mpvauto
    fi
   else
    if [ -e /tmp/mpv1 ] && [ $isplay1 -eq 1 ]; then
     echo "seek -10" > /tmp/mpv1
    fi
   fi
  ;;
  l|L) # Seek forward for 10 seconds deck 2
   if [ -e /tmp/mpv2 ] && [ $isplay2 -eq 1 ]; then
    echo "seek 10" > /tmp/mpv2
   fi
  ;;
  j|J) # Seek backward for 10 seconds deck 2
   if [ -e /tmp/mpv2 ] && [ $isplay2 -eq 1 ]; then
    echo "seek -10" > /tmp/mpv2
   fi
  ;;
  t|T) # Master volume up
   if [ $mvolume -lt 96 ]; then
    mvolume=$(($mvolume+5))
    _fader $(($MASTERPOS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $mvolume
    _set_volume
   fi
  ;;
  g|G) # Master volume down
   if [ $mvolume -gt 4 ]; then
    mvolume=$(($mvolume-5))
    _fader $(($MASTERPOS+4)) 2 $WHITE $GREEN $WHITE $RED $BLACK $WHITE $mvolume
    _set_volume
   fi
  ;;
  f|F) # Master fader left
   if [ $mfader -gt 9 ]; then
    mfader=$((mfader-10))
    _mfader $(($MASTERPOS+4)) 1 $WHITE $GREEN $WHITE $RED $mfader
    _set_volume
   fi
  ;;
  h|H) # Master fader right
   if [ $mfader -lt 91 ]; then
    mfader=$(($mfader+10))
    _mfader $(($MASTERPOS+4)) 1 $WHITE $GREEN $WHITE $RED $mfader
    _set_volume
   fi
  ;;
  5) # Toggle loop 1
   if [ ! $isplay1 -eq 1 ] || [ $isautodj -eq 1 ]; then
    if [ $isloop1 -eq 1 ]; then isloop1=0; else isloop1=1; fi
    _printdeck1
   fi
  ;;
  6) # Toggle loop 2
   if [ ! $isplay2 -eq 1 ] || [ $isautodj -eq 1 ]; then
    if [ $isloop2 -eq 1 ]; then isloop2=0; else isloop2=1; fi
    _printdeck2
   fi
  ;;
  0|3|p|P) # Toggle autoDJ
   if [ $isautodj -eq 1 ]; then
    echo "quit" > /tmp/mpvauto
    isautodj=0
    rm playlist.tmp
    _printdeck1
   else
    find $audio_dir -type f > playlist.tmp
    _set_volume
    mpv -af=equalizer="$EQU1" --shuffle --no-video --volume=$vol1 --input-file=/tmp/mpvauto --playlist=playlist.tmp > /tmp/mpvoutauto 2>&1 &
    isautodj=1
    _printdeck1
   fi
  ;;
  '?') # Help
   _colhelp; clear
   echo " DTCAP (DJ twin deck console audio player)"
   echo
   echo " ___DECK_A_________________________"
   echo " Q (pause)  W (Vol+)  E (Play/Stop)"
   echo " A (fwd)    S (Vol-)  D       (rew)"
   echo " ----------------------------------"
   echo
   echo " ___DECK_B_________________________"
   echo " U (pause)  I (Vol+)  O (Play/Stop)"
   echo " J (fwd)    K (Vol-)  L       (rew)"
   echo " ----------------------------------"
   read -n1 tmp; clear
   echo " ___MASTER______________________________"
   echo " R (Play A)     T (Vol+)  Y,Z   (Play B)"
   echo " F (fade_left)  G (Vol-)  H (fade_right)"
   echo " ---------------------------------------"
   echo
   echo " ___FILELIST_(cursor_keys)___________________________"
   echo " SPACE,1 (load_A)  UP     (list_up)  ENTER,2 (load_B)"
   echo " LEFT   (page_up)  DOWN (list_down)  RIGHT (page_dwn)"
   echo " ----------------------------------------------------"
   read -n1 tmp; clear
   echo " 5         (set loop for deck A)"
   echo " 6         (set loop for deck B)"
   echo " P,0,3     (autoDJ on deck A)"
   echo " X,ESC     (exit, quit)"
   echo " TAB,BKSPC (refresh display)"
   echo " /,-,<     (one directory up)"
   echo " ?         (this help)"
   echo
   echo " V1.0, (c) 2017 by deetee"
   read -n1 tmp
   _refresh
  ;;
  ^?|$TAB) # Refresh display
   _refresh
  ;;
  x|X|'^[') # Quit
   break
  ;;
 esac

done


#############
# CLEAN OUT #
#############

rm /tmp/mpv1
rm /tmp/mpv2
rm /tmp/mpvauto
rm /tmp/mpvout1
rm /tmp/mpvout2
rm /tmp/mpvoutauto
rm playlist.tmp
pkill mpv
reset # reset terminal
